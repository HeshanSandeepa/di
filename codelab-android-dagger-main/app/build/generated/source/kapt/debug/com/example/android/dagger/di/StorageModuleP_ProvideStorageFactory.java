// Generated by Dagger (https://dagger.dev).
package com.example.android.dagger.di;

import android.content.Context;
import com.example.android.dagger.storage.Storage;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class StorageModuleP_ProvideStorageFactory implements Factory<Storage> {
  private final StorageModuleP module;

  private final Provider<Context> contextProvider;

  public StorageModuleP_ProvideStorageFactory(StorageModuleP module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public Storage get() {
    return provideStorage(module, contextProvider.get());
  }

  public static StorageModuleP_ProvideStorageFactory create(StorageModuleP module,
      Provider<Context> contextProvider) {
    return new StorageModuleP_ProvideStorageFactory(module, contextProvider);
  }

  public static Storage provideStorage(StorageModuleP instance, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideStorage(context));
  }
}
